openapi: 3.0.2
info:
  title: UNB Geology API
  description: The UNB Geology API provides access to specimen metadata curated by the UNB Earth Science Centre.
  version: '0.1'

servers:
  - url: http://local-unbgeology.lib.unb.ca:3118/

paths:
  /api/terms:
    get:
      tags:
        - Term
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
      responses:
        200:
          $ref: "#/components/responses/TermQueryResult"
        400:
          $ref: "#/components/responses/BadRequest"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      tags:
        - Term
      security:
        - Session: []
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    label:
                      type: string
                      example: Sample term
                    type:
                      type: string
                      example: term
                - type: object
                  anyOf:
                    - properties:
                      parent:
                        type: string
                        format: uri
                        example: /api/terms/65ffb4e4ca21b3e99f821003
      responses:
        201:
          $ref: "#/components/responses/TermCreated"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      tags:
        - Term
      security:
        - Session: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: "#/components/schemas/TaxonomyTermBody"
        required: true
      responses:
        201:
          $ref: "#/components/responses/TermUpdated"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Term
      security:
        - Session: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
        - $ref: "#/components/parameters/sort"
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/search"
      responses:
        204:
          $ref: "#/components/responses/Deleted"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"
  /api/terms/{id}:
    get:
      tags:
        - Term
      operationId: classification.canonical
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        200:
          $ref: "#/components/responses/TermFound"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

    patch:
      tags:
        - Term
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - Session: []
      
      responses:
        200:
          $ref: "#/components/responses/TermUpdated"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Term
      parameters:
        - $ref: "#/components/parameters/id"
      security:
        - Session: []
      
      responses:
        204:
          $ref: "#/components/responses/Deleted"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
  
  /specimens:
    get:
      tags:
        - Specimen
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/pageSize"
      responses:
        200:
          $ref: "./specimens.yml#/components/responses/SpecimenQueryResult"
        204:
          $ref: "#/components/responses/Deleted"
        406:
          $ref: "#/components/responses/NotAccepted"
        default:
          $ref: "#/components/responses/ServerError"

    post:
      tags:
        - Specimen
      security:
        - Session: []
      requestBody:
        required: true
        $ref: "./specimens.yml#/components/requestBodies/Specimen"
      responses:
        201:
          $ref: "./specimens.yml#/components/responses/SpecimenCreated"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
  /specimens/{id}:
    get:
      tags:
        - Specimen
      parameters:
        - $ref: "./specimens.yml#/components/parameters/ID"
      responses:
        200:
          $ref: "./specimens.yml#/components/responses/SpecimenFound"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"
    
    put:
      tags:
        - Specimen
      parameters:
        - $ref: "./specimens.yml#/components/parameters/ID"
      requestBody:
        required: false
        $ref: "./specimens.yml#/components/requestBodies/SpecimenUpdate"
      security:
        - Session: []
      
      responses:
        200:
          $ref: "./specimens.yml#/components/responses/SpecimenUpdated"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

    delete:
      tags:
        - Specimen
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
          example: unb-001
      security:
        - Session: []
      
      responses:
        204:
          $ref: "#/components/responses/Deleted"
        400:
          $ref: "#/components/responses/BadRequest"
        404:
          $ref: "#/components/responses/NotFound"
        401:
          $ref: "#/components/responses/Unauthenticated"
        403:
          $ref: "#/components/responses/Unauthorized"
        default:
          $ref: "#/components/responses/ServerError"

components:
  schemas:
    EntityList:
      type: object
      properties:
        total:
          type: integer
          minimum: 0
        page:
          type: integer
          minimum: 1
        pageSize:
          type: integer
          minimum: 1
          example: 25
        nav:
          type: object
          properties:
            first:
              type: string
              format: uri
            prev:
              type: string
              format: uri
            next:
              type: string
              format: uri
            last:
              type: string
              format: uri
        entities:
          type: array
          items: {}
    Term:
      type: object
      required:
        - id
        - self
      properties:
        id:
          type: string
          example: 65ffb4e4ca21b3e99f821003
        self:
          type: string
          format: uri
          example: /api/terms/65ffb4e4ca21b3e99f821003
        label:
          type: string
          example: Sample term
        slug:
          type: string
          example: sample-term
        type:
          type: string
          example: term
    TermBody:
      type: object
      properties:
        label:
          type: string
          example: Sample term
        type:
          type: string
          example: term
    TaxonomyTerm:
      allOf:
        - $ref: "#/components/schemas/Term"
        - type: object
          properties:
            parents:
              type: array
              items:
                $ref: "#/components/schemas/TaxonomyTerm"
    TaxonomyTermBody:
      allOf:
        - $ref: "#/components/schemas/TermBody"
        - type: object
          properties:
            parent:
              type: string
              format: uri
              example: /api/terms/65ffb4e4ca21b3e99f821003
    TermList:
      allOf:
        - $ref: "#/components/schemas/EntityList"
        - type: object
          properties:
            entities:
              type: array
              items:
                anyOf:
                  - $ref: "#/components/schemas/Term"
                  - $ref: "#/components/schemas/TaxonomyTerm"
    Error:
      type: object
      properties:
        errorDetails:
          type: string

  parameters:
    id:
      name: id
      in: path
      required: true
      schema:
        type: string
      example: 65ffb4e4ca21b3e99f821003
    page:
      name: page
      description: Page number to return.
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
      required: false
    pageSize:
      name: pageSize
      description: Maximum number of entities to return per page.
      in: query
      schema:
        type: integer
        minimum: 1
        default: 25
      required: false
    sort:
      name: sort
      description: Field to sort by. Use "-" prefix for descending order.
      in: query
      schema:
        type: string
      required: false
      example:
        - label
        - -label
    select:
      name: select
      description: Field to include in the response. Use dotted notation for nested fields.
      in: query
      schema:
        type: string
      required: false
      example:
        - label
        - parent.label
    filter:
      name: filter
      in: query
      schema:
        type: string
        description: Expressions of the form "field:operator:value", where operator is one of "equals", "match", "greater", "less", "and", "or", "not", or any combination thereof.
        example:
          - "label:equals_not:Sample term"
          - "slug:match:^Sample"
      required: false
    search:
      name: search
      in: query
      schema:
        type: string
      required: false
  
  responses:
    Term:
      description: Term entity.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Term"      
    TermFound:
      description: Term entity found.
      $ref: "#/components/responses/Term"
    TermQueryResult:
      description: Term entities found.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TermList"
          example:
            total: 9
            page: 3
            pages: 5
            pageSize: 2
            entities:
              - id: 65ffb4e4ca21b3e99f821003
                self: /api/terms/65ffb4e4ca21b3e99f821003
                label: Sample term 4
                slug: sample-term-4
              - id: 65ffb552feed9350b3ea266a
                self: /api/terms/65ffb552feed9350b3ea266a
                label: Taxonomy term 2
                slug: taxonomy-term-2
                parents:
                  self: /api/terms/taxonomy-term-2/parents
            self: /api/terms?page=3
            nav:
              first: /api/terms?page=1
              previous: /api/terms?page=2
              next: /api/terms?page=4
              last: /api/terms?page=5
    TermCreated:
      description: Term entity created.
      $ref: "#/components/responses/Term"
    TermUpdated:
      description: Term entity created.
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Term"
              - type: object
                properties:
                  previous:
                    $ref: "#/components/schemas/Term"
    Deleted:
      description: Entity deleted.
    Error:
      description: Error response.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: Bad request.
      $ref: "#/components/responses/Error"
    Unauthenticated:
      description: Authentication required.
      $ref: "#/components/responses/Error"
    Unauthorized:
      description: Permission required.
      $ref: "#/components/responses/Error"
    NotFound:
      description: Entity not found.
      $ref: "#/components/responses/Error"
    NotAccepted:
      description: Format not supported.
      $ref: "#/components/responses/Error"
    ServerError:
      description: Server error.

  securitySchemes:
    Session:
      type: apiKey
      in: cookie
      name: sessionId